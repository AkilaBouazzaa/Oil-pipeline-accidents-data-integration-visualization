// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package oilaccidents.stagingarea_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: StagingArea Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class StagingArea implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "StagingArea";
	private final String projectName = "OILACCIDENTS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					StagingArea.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(StagingArea.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_OILACCIDENTS_StagingArea = new byte[0];
		static byte[] commonByteArray_OILACCIDENTS_StagingArea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Report_Number;

		public Integer getReport_Number() {
			return this.Report_Number;
		}

		public Integer Supplemental_Number;

		public Integer getSupplemental_Number() {
			return this.Supplemental_Number;
		}

		public java.util.Date Accident_Date_Time;

		public java.util.Date getAccident_Date_Time() {
			return this.Accident_Date_Time;
		}

		public Integer Operator_ID;

		public Integer getOperator_ID() {
			return this.Operator_ID;
		}

		public String Operator_Name;

		public String getOperator_Name() {
			return this.Operator_Name;
		}

		public String Pipeline_Facility_Name;

		public String getPipeline_Facility_Name() {
			return this.Pipeline_Facility_Name;
		}

		public String Pipeline_Location;

		public String getPipeline_Location() {
			return this.Pipeline_Location;
		}

		public String Pipeline_Type;

		public String getPipeline_Type() {
			return this.Pipeline_Type;
		}

		public String Liquid_Type;

		public String getLiquid_Type() {
			return this.Liquid_Type;
		}

		public String Liquid_Subtype;

		public String getLiquid_Subtype() {
			return this.Liquid_Subtype;
		}

		public String Liquid_Name;

		public String getLiquid_Name() {
			return this.Liquid_Name;
		}

		public String Accident_City;

		public String getAccident_City() {
			return this.Accident_City;
		}

		public String Accident_County;

		public String getAccident_County() {
			return this.Accident_County;
		}

		public String Accident_State;

		public String getAccident_State() {
			return this.Accident_State;
		}

		public Float Accident_Latitude;

		public Float getAccident_Latitude() {
			return this.Accident_Latitude;
		}

		public Float Accident_Longitude;

		public Float getAccident_Longitude() {
			return this.Accident_Longitude;
		}

		public String Cause_Category;

		public String getCause_Category() {
			return this.Cause_Category;
		}

		public String Cause_Subcategory;

		public String getCause_Subcategory() {
			return this.Cause_Subcategory;
		}

		public Double Unintentional_Release__Barrels;

		public Double getUnintentional_Release__Barrels() {
			return this.Unintentional_Release__Barrels;
		}

		public Double Intentional_Release__Barrels;

		public Double getIntentional_Release__Barrels() {
			return this.Intentional_Release__Barrels;
		}

		public Double Net_Loss__Barrels;

		public Double getNet_Loss__Barrels() {
			return this.Net_Loss__Barrels;
		}

		public String Pipeline_Shutdown;

		public String getPipeline_Shutdown() {
			return this.Pipeline_Shutdown;
		}

		public java.util.Date Shutdown_Date_Time;

		public java.util.Date getShutdown_Date_Time() {
			return this.Shutdown_Date_Time;
		}

		public java.util.Date Restart_Date_Time;

		public java.util.Date getRestart_Date_Time() {
			return this.Restart_Date_Time;
		}

		public Integer Property_Damage_Costs;

		public Integer getProperty_Damage_Costs() {
			return this.Property_Damage_Costs;
		}

		public Integer Lost_Commodity_Costs;

		public Integer getLost_Commodity_Costs() {
			return this.Lost_Commodity_Costs;
		}

		public Integer Public_Private_Property_Damage_Costs;

		public Integer getPublic_Private_Property_Damage_Costs() {
			return this.Public_Private_Property_Damage_Costs;
		}

		public Integer Emergency_Response_Costs;

		public Integer getEmergency_Response_Costs() {
			return this.Emergency_Response_Costs;
		}

		public Integer Environmental_Remediation_Costs;

		public Integer getEnvironmental_Remediation_Costs() {
			return this.Environmental_Remediation_Costs;
		}

		public Integer All_Costs;

		public Integer getAll_Costs() {
			return this.All_Costs;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Report_Number == null) ? 0 : this.Report_Number.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.Report_Number == null) {
				if (other.Report_Number != null)
					return false;

			} else if (!this.Report_Number.equals(other.Report_Number))

				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.Report_Number = this.Report_Number;
			other.Supplemental_Number = this.Supplemental_Number;
			other.Accident_Date_Time = this.Accident_Date_Time;
			other.Operator_ID = this.Operator_ID;
			other.Operator_Name = this.Operator_Name;
			other.Pipeline_Facility_Name = this.Pipeline_Facility_Name;
			other.Pipeline_Location = this.Pipeline_Location;
			other.Pipeline_Type = this.Pipeline_Type;
			other.Liquid_Type = this.Liquid_Type;
			other.Liquid_Subtype = this.Liquid_Subtype;
			other.Liquid_Name = this.Liquid_Name;
			other.Accident_City = this.Accident_City;
			other.Accident_County = this.Accident_County;
			other.Accident_State = this.Accident_State;
			other.Accident_Latitude = this.Accident_Latitude;
			other.Accident_Longitude = this.Accident_Longitude;
			other.Cause_Category = this.Cause_Category;
			other.Cause_Subcategory = this.Cause_Subcategory;
			other.Unintentional_Release__Barrels = this.Unintentional_Release__Barrels;
			other.Intentional_Release__Barrels = this.Intentional_Release__Barrels;
			other.Net_Loss__Barrels = this.Net_Loss__Barrels;
			other.Pipeline_Shutdown = this.Pipeline_Shutdown;
			other.Shutdown_Date_Time = this.Shutdown_Date_Time;
			other.Restart_Date_Time = this.Restart_Date_Time;
			other.Property_Damage_Costs = this.Property_Damage_Costs;
			other.Lost_Commodity_Costs = this.Lost_Commodity_Costs;
			other.Public_Private_Property_Damage_Costs = this.Public_Private_Property_Damage_Costs;
			other.Emergency_Response_Costs = this.Emergency_Response_Costs;
			other.Environmental_Remediation_Costs = this.Environmental_Remediation_Costs;
			other.All_Costs = this.All_Costs;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.Report_Number = this.Report_Number;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OILACCIDENTS_StagingArea.length) {
					if (length < 1024 && commonByteArray_OILACCIDENTS_StagingArea.length == 0) {
						commonByteArray_OILACCIDENTS_StagingArea = new byte[1024];
					} else {
						commonByteArray_OILACCIDENTS_StagingArea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OILACCIDENTS_StagingArea, 0, length);
				strReturn = new String(commonByteArray_OILACCIDENTS_StagingArea, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OILACCIDENTS_StagingArea.length) {
					if (length < 1024 && commonByteArray_OILACCIDENTS_StagingArea.length == 0) {
						commonByteArray_OILACCIDENTS_StagingArea = new byte[1024];
					} else {
						commonByteArray_OILACCIDENTS_StagingArea = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_OILACCIDENTS_StagingArea, 0, length);
				strReturn = new String(commonByteArray_OILACCIDENTS_StagingArea, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OILACCIDENTS_StagingArea) {

				try {

					int length = 0;

					this.Report_Number = readInteger(dis);

					this.Supplemental_Number = readInteger(dis);

					this.Accident_Date_Time = readDate(dis);

					this.Operator_ID = readInteger(dis);

					this.Operator_Name = readString(dis);

					this.Pipeline_Facility_Name = readString(dis);

					this.Pipeline_Location = readString(dis);

					this.Pipeline_Type = readString(dis);

					this.Liquid_Type = readString(dis);

					this.Liquid_Subtype = readString(dis);

					this.Liquid_Name = readString(dis);

					this.Accident_City = readString(dis);

					this.Accident_County = readString(dis);

					this.Accident_State = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Accident_Latitude = null;
					} else {
						this.Accident_Latitude = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Accident_Longitude = null;
					} else {
						this.Accident_Longitude = dis.readFloat();
					}

					this.Cause_Category = readString(dis);

					this.Cause_Subcategory = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unintentional_Release__Barrels = null;
					} else {
						this.Unintentional_Release__Barrels = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Intentional_Release__Barrels = null;
					} else {
						this.Intentional_Release__Barrels = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Net_Loss__Barrels = null;
					} else {
						this.Net_Loss__Barrels = dis.readDouble();
					}

					this.Pipeline_Shutdown = readString(dis);

					this.Shutdown_Date_Time = readDate(dis);

					this.Restart_Date_Time = readDate(dis);

					this.Property_Damage_Costs = readInteger(dis);

					this.Lost_Commodity_Costs = readInteger(dis);

					this.Public_Private_Property_Damage_Costs = readInteger(dis);

					this.Emergency_Response_Costs = readInteger(dis);

					this.Environmental_Remediation_Costs = readInteger(dis);

					this.All_Costs = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_OILACCIDENTS_StagingArea) {

				try {

					int length = 0;

					this.Report_Number = readInteger(dis);

					this.Supplemental_Number = readInteger(dis);

					this.Accident_Date_Time = readDate(dis);

					this.Operator_ID = readInteger(dis);

					this.Operator_Name = readString(dis);

					this.Pipeline_Facility_Name = readString(dis);

					this.Pipeline_Location = readString(dis);

					this.Pipeline_Type = readString(dis);

					this.Liquid_Type = readString(dis);

					this.Liquid_Subtype = readString(dis);

					this.Liquid_Name = readString(dis);

					this.Accident_City = readString(dis);

					this.Accident_County = readString(dis);

					this.Accident_State = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Accident_Latitude = null;
					} else {
						this.Accident_Latitude = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Accident_Longitude = null;
					} else {
						this.Accident_Longitude = dis.readFloat();
					}

					this.Cause_Category = readString(dis);

					this.Cause_Subcategory = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unintentional_Release__Barrels = null;
					} else {
						this.Unintentional_Release__Barrels = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Intentional_Release__Barrels = null;
					} else {
						this.Intentional_Release__Barrels = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Net_Loss__Barrels = null;
					} else {
						this.Net_Loss__Barrels = dis.readDouble();
					}

					this.Pipeline_Shutdown = readString(dis);

					this.Shutdown_Date_Time = readDate(dis);

					this.Restart_Date_Time = readDate(dis);

					this.Property_Damage_Costs = readInteger(dis);

					this.Lost_Commodity_Costs = readInteger(dis);

					this.Public_Private_Property_Damage_Costs = readInteger(dis);

					this.Emergency_Response_Costs = readInteger(dis);

					this.Environmental_Remediation_Costs = readInteger(dis);

					this.All_Costs = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Report_Number, dos);

				// Integer

				writeInteger(this.Supplemental_Number, dos);

				// java.util.Date

				writeDate(this.Accident_Date_Time, dos);

				// Integer

				writeInteger(this.Operator_ID, dos);

				// String

				writeString(this.Operator_Name, dos);

				// String

				writeString(this.Pipeline_Facility_Name, dos);

				// String

				writeString(this.Pipeline_Location, dos);

				// String

				writeString(this.Pipeline_Type, dos);

				// String

				writeString(this.Liquid_Type, dos);

				// String

				writeString(this.Liquid_Subtype, dos);

				// String

				writeString(this.Liquid_Name, dos);

				// String

				writeString(this.Accident_City, dos);

				// String

				writeString(this.Accident_County, dos);

				// String

				writeString(this.Accident_State, dos);

				// Float

				if (this.Accident_Latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Accident_Latitude);
				}

				// Float

				if (this.Accident_Longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Accident_Longitude);
				}

				// String

				writeString(this.Cause_Category, dos);

				// String

				writeString(this.Cause_Subcategory, dos);

				// Double

				if (this.Unintentional_Release__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unintentional_Release__Barrels);
				}

				// Double

				if (this.Intentional_Release__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Intentional_Release__Barrels);
				}

				// Double

				if (this.Net_Loss__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Net_Loss__Barrels);
				}

				// String

				writeString(this.Pipeline_Shutdown, dos);

				// java.util.Date

				writeDate(this.Shutdown_Date_Time, dos);

				// java.util.Date

				writeDate(this.Restart_Date_Time, dos);

				// Integer

				writeInteger(this.Property_Damage_Costs, dos);

				// Integer

				writeInteger(this.Lost_Commodity_Costs, dos);

				// Integer

				writeInteger(this.Public_Private_Property_Damage_Costs, dos);

				// Integer

				writeInteger(this.Emergency_Response_Costs, dos);

				// Integer

				writeInteger(this.Environmental_Remediation_Costs, dos);

				// Integer

				writeInteger(this.All_Costs, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Report_Number, dos);

				// Integer

				writeInteger(this.Supplemental_Number, dos);

				// java.util.Date

				writeDate(this.Accident_Date_Time, dos);

				// Integer

				writeInteger(this.Operator_ID, dos);

				// String

				writeString(this.Operator_Name, dos);

				// String

				writeString(this.Pipeline_Facility_Name, dos);

				// String

				writeString(this.Pipeline_Location, dos);

				// String

				writeString(this.Pipeline_Type, dos);

				// String

				writeString(this.Liquid_Type, dos);

				// String

				writeString(this.Liquid_Subtype, dos);

				// String

				writeString(this.Liquid_Name, dos);

				// String

				writeString(this.Accident_City, dos);

				// String

				writeString(this.Accident_County, dos);

				// String

				writeString(this.Accident_State, dos);

				// Float

				if (this.Accident_Latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Accident_Latitude);
				}

				// Float

				if (this.Accident_Longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Accident_Longitude);
				}

				// String

				writeString(this.Cause_Category, dos);

				// String

				writeString(this.Cause_Subcategory, dos);

				// Double

				if (this.Unintentional_Release__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unintentional_Release__Barrels);
				}

				// Double

				if (this.Intentional_Release__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Intentional_Release__Barrels);
				}

				// Double

				if (this.Net_Loss__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Net_Loss__Barrels);
				}

				// String

				writeString(this.Pipeline_Shutdown, dos);

				// java.util.Date

				writeDate(this.Shutdown_Date_Time, dos);

				// java.util.Date

				writeDate(this.Restart_Date_Time, dos);

				// Integer

				writeInteger(this.Property_Damage_Costs, dos);

				// Integer

				writeInteger(this.Lost_Commodity_Costs, dos);

				// Integer

				writeInteger(this.Public_Private_Property_Damage_Costs, dos);

				// Integer

				writeInteger(this.Emergency_Response_Costs, dos);

				// Integer

				writeInteger(this.Environmental_Remediation_Costs, dos);

				// Integer

				writeInteger(this.All_Costs, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Report_Number=" + String.valueOf(Report_Number));
			sb.append(",Supplemental_Number=" + String.valueOf(Supplemental_Number));
			sb.append(",Accident_Date_Time=" + String.valueOf(Accident_Date_Time));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Operator_Name=" + Operator_Name);
			sb.append(",Pipeline_Facility_Name=" + Pipeline_Facility_Name);
			sb.append(",Pipeline_Location=" + Pipeline_Location);
			sb.append(",Pipeline_Type=" + Pipeline_Type);
			sb.append(",Liquid_Type=" + Liquid_Type);
			sb.append(",Liquid_Subtype=" + Liquid_Subtype);
			sb.append(",Liquid_Name=" + Liquid_Name);
			sb.append(",Accident_City=" + Accident_City);
			sb.append(",Accident_County=" + Accident_County);
			sb.append(",Accident_State=" + Accident_State);
			sb.append(",Accident_Latitude=" + String.valueOf(Accident_Latitude));
			sb.append(",Accident_Longitude=" + String.valueOf(Accident_Longitude));
			sb.append(",Cause_Category=" + Cause_Category);
			sb.append(",Cause_Subcategory=" + Cause_Subcategory);
			sb.append(",Unintentional_Release__Barrels=" + String.valueOf(Unintentional_Release__Barrels));
			sb.append(",Intentional_Release__Barrels=" + String.valueOf(Intentional_Release__Barrels));
			sb.append(",Net_Loss__Barrels=" + String.valueOf(Net_Loss__Barrels));
			sb.append(",Pipeline_Shutdown=" + Pipeline_Shutdown);
			sb.append(",Shutdown_Date_Time=" + String.valueOf(Shutdown_Date_Time));
			sb.append(",Restart_Date_Time=" + String.valueOf(Restart_Date_Time));
			sb.append(",Property_Damage_Costs=" + String.valueOf(Property_Damage_Costs));
			sb.append(",Lost_Commodity_Costs=" + String.valueOf(Lost_Commodity_Costs));
			sb.append(",Public_Private_Property_Damage_Costs=" + String.valueOf(Public_Private_Property_Damage_Costs));
			sb.append(",Emergency_Response_Costs=" + String.valueOf(Emergency_Response_Costs));
			sb.append(",Environmental_Remediation_Costs=" + String.valueOf(Environmental_Remediation_Costs));
			sb.append(",All_Costs=" + String.valueOf(All_Costs));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Report_Number, other.Report_Number);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_OILACCIDENTS_StagingArea = new byte[0];
		static byte[] commonByteArray_OILACCIDENTS_StagingArea = new byte[0];

		public Integer Report_Number;

		public Integer getReport_Number() {
			return this.Report_Number;
		}

		public Integer Supplemental_Number;

		public Integer getSupplemental_Number() {
			return this.Supplemental_Number;
		}

		public Integer Accident_Year;

		public Integer getAccident_Year() {
			return this.Accident_Year;
		}

		public java.util.Date Accident_Date_Time;

		public java.util.Date getAccident_Date_Time() {
			return this.Accident_Date_Time;
		}

		public Integer Operator_ID;

		public Integer getOperator_ID() {
			return this.Operator_ID;
		}

		public String Operator_Name;

		public String getOperator_Name() {
			return this.Operator_Name;
		}

		public String Pipeline_Facility_Name;

		public String getPipeline_Facility_Name() {
			return this.Pipeline_Facility_Name;
		}

		public String Pipeline_Location;

		public String getPipeline_Location() {
			return this.Pipeline_Location;
		}

		public String Pipeline_Type;

		public String getPipeline_Type() {
			return this.Pipeline_Type;
		}

		public String Liquid_Type;

		public String getLiquid_Type() {
			return this.Liquid_Type;
		}

		public String Liquid_Subtype;

		public String getLiquid_Subtype() {
			return this.Liquid_Subtype;
		}

		public String Liquid_Name;

		public String getLiquid_Name() {
			return this.Liquid_Name;
		}

		public String Accident_City;

		public String getAccident_City() {
			return this.Accident_City;
		}

		public String Accident_County;

		public String getAccident_County() {
			return this.Accident_County;
		}

		public String Accident_State;

		public String getAccident_State() {
			return this.Accident_State;
		}

		public Float Accident_Latitude;

		public Float getAccident_Latitude() {
			return this.Accident_Latitude;
		}

		public Float Accident_Longitude;

		public Float getAccident_Longitude() {
			return this.Accident_Longitude;
		}

		public String Cause_Category;

		public String getCause_Category() {
			return this.Cause_Category;
		}

		public String Cause_Subcategory;

		public String getCause_Subcategory() {
			return this.Cause_Subcategory;
		}

		public Double Unintentional_Release__Barrels;

		public Double getUnintentional_Release__Barrels() {
			return this.Unintentional_Release__Barrels;
		}

		public Double Intentional_Release__Barrels;

		public Double getIntentional_Release__Barrels() {
			return this.Intentional_Release__Barrels;
		}

		public String Liquid_Recovery__Barrels;

		public String getLiquid_Recovery__Barrels() {
			return this.Liquid_Recovery__Barrels;
		}

		public Double Net_Loss__Barrels;

		public Double getNet_Loss__Barrels() {
			return this.Net_Loss__Barrels;
		}

		public String Liquid_Ignition;

		public String getLiquid_Ignition() {
			return this.Liquid_Ignition;
		}

		public String Liquid_Explosion;

		public String getLiquid_Explosion() {
			return this.Liquid_Explosion;
		}

		public String Pipeline_Shutdown;

		public String getPipeline_Shutdown() {
			return this.Pipeline_Shutdown;
		}

		public java.util.Date Shutdown_Date_Time;

		public java.util.Date getShutdown_Date_Time() {
			return this.Shutdown_Date_Time;
		}

		public java.util.Date Restart_Date_Time;

		public java.util.Date getRestart_Date_Time() {
			return this.Restart_Date_Time;
		}

		public String Public_Evacuations;

		public String getPublic_Evacuations() {
			return this.Public_Evacuations;
		}

		public String Operator_Employee_Injuries;

		public String getOperator_Employee_Injuries() {
			return this.Operator_Employee_Injuries;
		}

		public String Operator_Contractor_Injuries;

		public String getOperator_Contractor_Injuries() {
			return this.Operator_Contractor_Injuries;
		}

		public String Emergency_Responder_Injuries;

		public String getEmergency_Responder_Injuries() {
			return this.Emergency_Responder_Injuries;
		}

		public String Other_Injuries;

		public String getOther_Injuries() {
			return this.Other_Injuries;
		}

		public String Public_Injuries;

		public String getPublic_Injuries() {
			return this.Public_Injuries;
		}

		public String All_Injuries;

		public String getAll_Injuries() {
			return this.All_Injuries;
		}

		public String Operator_Employee_Fatalities;

		public String getOperator_Employee_Fatalities() {
			return this.Operator_Employee_Fatalities;
		}

		public String Operator_Contractor_Fatalities;

		public String getOperator_Contractor_Fatalities() {
			return this.Operator_Contractor_Fatalities;
		}

		public String Emergency_Responder_Fatalities;

		public String getEmergency_Responder_Fatalities() {
			return this.Emergency_Responder_Fatalities;
		}

		public String Other_Fatalities;

		public String getOther_Fatalities() {
			return this.Other_Fatalities;
		}

		public String Public_Fatalities;

		public String getPublic_Fatalities() {
			return this.Public_Fatalities;
		}

		public String All_Fatalities;

		public String getAll_Fatalities() {
			return this.All_Fatalities;
		}

		public Integer Property_Damage_Costs;

		public Integer getProperty_Damage_Costs() {
			return this.Property_Damage_Costs;
		}

		public Integer Lost_Commodity_Costs;

		public Integer getLost_Commodity_Costs() {
			return this.Lost_Commodity_Costs;
		}

		public Integer Public_Private_Property_Damage_Costs;

		public Integer getPublic_Private_Property_Damage_Costs() {
			return this.Public_Private_Property_Damage_Costs;
		}

		public Integer Emergency_Response_Costs;

		public Integer getEmergency_Response_Costs() {
			return this.Emergency_Response_Costs;
		}

		public Integer Environmental_Remediation_Costs;

		public Integer getEnvironmental_Remediation_Costs() {
			return this.Environmental_Remediation_Costs;
		}

		public String Other_Costs;

		public String getOther_Costs() {
			return this.Other_Costs;
		}

		public Integer All_Costs;

		public Integer getAll_Costs() {
			return this.All_Costs;
		}

		public String Column48;

		public String getColumn48() {
			return this.Column48;
		}

		public String Column49;

		public String getColumn49() {
			return this.Column49;
		}

		public String Column50;

		public String getColumn50() {
			return this.Column50;
		}

		public String Column51;

		public String getColumn51() {
			return this.Column51;
		}

		public String Column52;

		public String getColumn52() {
			return this.Column52;
		}

		public String Column53;

		public String getColumn53() {
			return this.Column53;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OILACCIDENTS_StagingArea.length) {
					if (length < 1024 && commonByteArray_OILACCIDENTS_StagingArea.length == 0) {
						commonByteArray_OILACCIDENTS_StagingArea = new byte[1024];
					} else {
						commonByteArray_OILACCIDENTS_StagingArea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OILACCIDENTS_StagingArea, 0, length);
				strReturn = new String(commonByteArray_OILACCIDENTS_StagingArea, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OILACCIDENTS_StagingArea.length) {
					if (length < 1024 && commonByteArray_OILACCIDENTS_StagingArea.length == 0) {
						commonByteArray_OILACCIDENTS_StagingArea = new byte[1024];
					} else {
						commonByteArray_OILACCIDENTS_StagingArea = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_OILACCIDENTS_StagingArea, 0, length);
				strReturn = new String(commonByteArray_OILACCIDENTS_StagingArea, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OILACCIDENTS_StagingArea) {

				try {

					int length = 0;

					this.Report_Number = readInteger(dis);

					this.Supplemental_Number = readInteger(dis);

					this.Accident_Year = readInteger(dis);

					this.Accident_Date_Time = readDate(dis);

					this.Operator_ID = readInteger(dis);

					this.Operator_Name = readString(dis);

					this.Pipeline_Facility_Name = readString(dis);

					this.Pipeline_Location = readString(dis);

					this.Pipeline_Type = readString(dis);

					this.Liquid_Type = readString(dis);

					this.Liquid_Subtype = readString(dis);

					this.Liquid_Name = readString(dis);

					this.Accident_City = readString(dis);

					this.Accident_County = readString(dis);

					this.Accident_State = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Accident_Latitude = null;
					} else {
						this.Accident_Latitude = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Accident_Longitude = null;
					} else {
						this.Accident_Longitude = dis.readFloat();
					}

					this.Cause_Category = readString(dis);

					this.Cause_Subcategory = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unintentional_Release__Barrels = null;
					} else {
						this.Unintentional_Release__Barrels = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Intentional_Release__Barrels = null;
					} else {
						this.Intentional_Release__Barrels = dis.readDouble();
					}

					this.Liquid_Recovery__Barrels = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Net_Loss__Barrels = null;
					} else {
						this.Net_Loss__Barrels = dis.readDouble();
					}

					this.Liquid_Ignition = readString(dis);

					this.Liquid_Explosion = readString(dis);

					this.Pipeline_Shutdown = readString(dis);

					this.Shutdown_Date_Time = readDate(dis);

					this.Restart_Date_Time = readDate(dis);

					this.Public_Evacuations = readString(dis);

					this.Operator_Employee_Injuries = readString(dis);

					this.Operator_Contractor_Injuries = readString(dis);

					this.Emergency_Responder_Injuries = readString(dis);

					this.Other_Injuries = readString(dis);

					this.Public_Injuries = readString(dis);

					this.All_Injuries = readString(dis);

					this.Operator_Employee_Fatalities = readString(dis);

					this.Operator_Contractor_Fatalities = readString(dis);

					this.Emergency_Responder_Fatalities = readString(dis);

					this.Other_Fatalities = readString(dis);

					this.Public_Fatalities = readString(dis);

					this.All_Fatalities = readString(dis);

					this.Property_Damage_Costs = readInteger(dis);

					this.Lost_Commodity_Costs = readInteger(dis);

					this.Public_Private_Property_Damage_Costs = readInteger(dis);

					this.Emergency_Response_Costs = readInteger(dis);

					this.Environmental_Remediation_Costs = readInteger(dis);

					this.Other_Costs = readString(dis);

					this.All_Costs = readInteger(dis);

					this.Column48 = readString(dis);

					this.Column49 = readString(dis);

					this.Column50 = readString(dis);

					this.Column51 = readString(dis);

					this.Column52 = readString(dis);

					this.Column53 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_OILACCIDENTS_StagingArea) {

				try {

					int length = 0;

					this.Report_Number = readInteger(dis);

					this.Supplemental_Number = readInteger(dis);

					this.Accident_Year = readInteger(dis);

					this.Accident_Date_Time = readDate(dis);

					this.Operator_ID = readInteger(dis);

					this.Operator_Name = readString(dis);

					this.Pipeline_Facility_Name = readString(dis);

					this.Pipeline_Location = readString(dis);

					this.Pipeline_Type = readString(dis);

					this.Liquid_Type = readString(dis);

					this.Liquid_Subtype = readString(dis);

					this.Liquid_Name = readString(dis);

					this.Accident_City = readString(dis);

					this.Accident_County = readString(dis);

					this.Accident_State = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Accident_Latitude = null;
					} else {
						this.Accident_Latitude = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Accident_Longitude = null;
					} else {
						this.Accident_Longitude = dis.readFloat();
					}

					this.Cause_Category = readString(dis);

					this.Cause_Subcategory = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Unintentional_Release__Barrels = null;
					} else {
						this.Unintentional_Release__Barrels = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Intentional_Release__Barrels = null;
					} else {
						this.Intentional_Release__Barrels = dis.readDouble();
					}

					this.Liquid_Recovery__Barrels = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Net_Loss__Barrels = null;
					} else {
						this.Net_Loss__Barrels = dis.readDouble();
					}

					this.Liquid_Ignition = readString(dis);

					this.Liquid_Explosion = readString(dis);

					this.Pipeline_Shutdown = readString(dis);

					this.Shutdown_Date_Time = readDate(dis);

					this.Restart_Date_Time = readDate(dis);

					this.Public_Evacuations = readString(dis);

					this.Operator_Employee_Injuries = readString(dis);

					this.Operator_Contractor_Injuries = readString(dis);

					this.Emergency_Responder_Injuries = readString(dis);

					this.Other_Injuries = readString(dis);

					this.Public_Injuries = readString(dis);

					this.All_Injuries = readString(dis);

					this.Operator_Employee_Fatalities = readString(dis);

					this.Operator_Contractor_Fatalities = readString(dis);

					this.Emergency_Responder_Fatalities = readString(dis);

					this.Other_Fatalities = readString(dis);

					this.Public_Fatalities = readString(dis);

					this.All_Fatalities = readString(dis);

					this.Property_Damage_Costs = readInteger(dis);

					this.Lost_Commodity_Costs = readInteger(dis);

					this.Public_Private_Property_Damage_Costs = readInteger(dis);

					this.Emergency_Response_Costs = readInteger(dis);

					this.Environmental_Remediation_Costs = readInteger(dis);

					this.Other_Costs = readString(dis);

					this.All_Costs = readInteger(dis);

					this.Column48 = readString(dis);

					this.Column49 = readString(dis);

					this.Column50 = readString(dis);

					this.Column51 = readString(dis);

					this.Column52 = readString(dis);

					this.Column53 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Report_Number, dos);

				// Integer

				writeInteger(this.Supplemental_Number, dos);

				// Integer

				writeInteger(this.Accident_Year, dos);

				// java.util.Date

				writeDate(this.Accident_Date_Time, dos);

				// Integer

				writeInteger(this.Operator_ID, dos);

				// String

				writeString(this.Operator_Name, dos);

				// String

				writeString(this.Pipeline_Facility_Name, dos);

				// String

				writeString(this.Pipeline_Location, dos);

				// String

				writeString(this.Pipeline_Type, dos);

				// String

				writeString(this.Liquid_Type, dos);

				// String

				writeString(this.Liquid_Subtype, dos);

				// String

				writeString(this.Liquid_Name, dos);

				// String

				writeString(this.Accident_City, dos);

				// String

				writeString(this.Accident_County, dos);

				// String

				writeString(this.Accident_State, dos);

				// Float

				if (this.Accident_Latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Accident_Latitude);
				}

				// Float

				if (this.Accident_Longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Accident_Longitude);
				}

				// String

				writeString(this.Cause_Category, dos);

				// String

				writeString(this.Cause_Subcategory, dos);

				// Double

				if (this.Unintentional_Release__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unintentional_Release__Barrels);
				}

				// Double

				if (this.Intentional_Release__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Intentional_Release__Barrels);
				}

				// String

				writeString(this.Liquid_Recovery__Barrels, dos);

				// Double

				if (this.Net_Loss__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Net_Loss__Barrels);
				}

				// String

				writeString(this.Liquid_Ignition, dos);

				// String

				writeString(this.Liquid_Explosion, dos);

				// String

				writeString(this.Pipeline_Shutdown, dos);

				// java.util.Date

				writeDate(this.Shutdown_Date_Time, dos);

				// java.util.Date

				writeDate(this.Restart_Date_Time, dos);

				// String

				writeString(this.Public_Evacuations, dos);

				// String

				writeString(this.Operator_Employee_Injuries, dos);

				// String

				writeString(this.Operator_Contractor_Injuries, dos);

				// String

				writeString(this.Emergency_Responder_Injuries, dos);

				// String

				writeString(this.Other_Injuries, dos);

				// String

				writeString(this.Public_Injuries, dos);

				// String

				writeString(this.All_Injuries, dos);

				// String

				writeString(this.Operator_Employee_Fatalities, dos);

				// String

				writeString(this.Operator_Contractor_Fatalities, dos);

				// String

				writeString(this.Emergency_Responder_Fatalities, dos);

				// String

				writeString(this.Other_Fatalities, dos);

				// String

				writeString(this.Public_Fatalities, dos);

				// String

				writeString(this.All_Fatalities, dos);

				// Integer

				writeInteger(this.Property_Damage_Costs, dos);

				// Integer

				writeInteger(this.Lost_Commodity_Costs, dos);

				// Integer

				writeInteger(this.Public_Private_Property_Damage_Costs, dos);

				// Integer

				writeInteger(this.Emergency_Response_Costs, dos);

				// Integer

				writeInteger(this.Environmental_Remediation_Costs, dos);

				// String

				writeString(this.Other_Costs, dos);

				// Integer

				writeInteger(this.All_Costs, dos);

				// String

				writeString(this.Column48, dos);

				// String

				writeString(this.Column49, dos);

				// String

				writeString(this.Column50, dos);

				// String

				writeString(this.Column51, dos);

				// String

				writeString(this.Column52, dos);

				// String

				writeString(this.Column53, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Report_Number, dos);

				// Integer

				writeInteger(this.Supplemental_Number, dos);

				// Integer

				writeInteger(this.Accident_Year, dos);

				// java.util.Date

				writeDate(this.Accident_Date_Time, dos);

				// Integer

				writeInteger(this.Operator_ID, dos);

				// String

				writeString(this.Operator_Name, dos);

				// String

				writeString(this.Pipeline_Facility_Name, dos);

				// String

				writeString(this.Pipeline_Location, dos);

				// String

				writeString(this.Pipeline_Type, dos);

				// String

				writeString(this.Liquid_Type, dos);

				// String

				writeString(this.Liquid_Subtype, dos);

				// String

				writeString(this.Liquid_Name, dos);

				// String

				writeString(this.Accident_City, dos);

				// String

				writeString(this.Accident_County, dos);

				// String

				writeString(this.Accident_State, dos);

				// Float

				if (this.Accident_Latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Accident_Latitude);
				}

				// Float

				if (this.Accident_Longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Accident_Longitude);
				}

				// String

				writeString(this.Cause_Category, dos);

				// String

				writeString(this.Cause_Subcategory, dos);

				// Double

				if (this.Unintentional_Release__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Unintentional_Release__Barrels);
				}

				// Double

				if (this.Intentional_Release__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Intentional_Release__Barrels);
				}

				// String

				writeString(this.Liquid_Recovery__Barrels, dos);

				// Double

				if (this.Net_Loss__Barrels == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Net_Loss__Barrels);
				}

				// String

				writeString(this.Liquid_Ignition, dos);

				// String

				writeString(this.Liquid_Explosion, dos);

				// String

				writeString(this.Pipeline_Shutdown, dos);

				// java.util.Date

				writeDate(this.Shutdown_Date_Time, dos);

				// java.util.Date

				writeDate(this.Restart_Date_Time, dos);

				// String

				writeString(this.Public_Evacuations, dos);

				// String

				writeString(this.Operator_Employee_Injuries, dos);

				// String

				writeString(this.Operator_Contractor_Injuries, dos);

				// String

				writeString(this.Emergency_Responder_Injuries, dos);

				// String

				writeString(this.Other_Injuries, dos);

				// String

				writeString(this.Public_Injuries, dos);

				// String

				writeString(this.All_Injuries, dos);

				// String

				writeString(this.Operator_Employee_Fatalities, dos);

				// String

				writeString(this.Operator_Contractor_Fatalities, dos);

				// String

				writeString(this.Emergency_Responder_Fatalities, dos);

				// String

				writeString(this.Other_Fatalities, dos);

				// String

				writeString(this.Public_Fatalities, dos);

				// String

				writeString(this.All_Fatalities, dos);

				// Integer

				writeInteger(this.Property_Damage_Costs, dos);

				// Integer

				writeInteger(this.Lost_Commodity_Costs, dos);

				// Integer

				writeInteger(this.Public_Private_Property_Damage_Costs, dos);

				// Integer

				writeInteger(this.Emergency_Response_Costs, dos);

				// Integer

				writeInteger(this.Environmental_Remediation_Costs, dos);

				// String

				writeString(this.Other_Costs, dos);

				// Integer

				writeInteger(this.All_Costs, dos);

				// String

				writeString(this.Column48, dos);

				// String

				writeString(this.Column49, dos);

				// String

				writeString(this.Column50, dos);

				// String

				writeString(this.Column51, dos);

				// String

				writeString(this.Column52, dos);

				// String

				writeString(this.Column53, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Report_Number=" + String.valueOf(Report_Number));
			sb.append(",Supplemental_Number=" + String.valueOf(Supplemental_Number));
			sb.append(",Accident_Year=" + String.valueOf(Accident_Year));
			sb.append(",Accident_Date_Time=" + String.valueOf(Accident_Date_Time));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Operator_Name=" + Operator_Name);
			sb.append(",Pipeline_Facility_Name=" + Pipeline_Facility_Name);
			sb.append(",Pipeline_Location=" + Pipeline_Location);
			sb.append(",Pipeline_Type=" + Pipeline_Type);
			sb.append(",Liquid_Type=" + Liquid_Type);
			sb.append(",Liquid_Subtype=" + Liquid_Subtype);
			sb.append(",Liquid_Name=" + Liquid_Name);
			sb.append(",Accident_City=" + Accident_City);
			sb.append(",Accident_County=" + Accident_County);
			sb.append(",Accident_State=" + Accident_State);
			sb.append(",Accident_Latitude=" + String.valueOf(Accident_Latitude));
			sb.append(",Accident_Longitude=" + String.valueOf(Accident_Longitude));
			sb.append(",Cause_Category=" + Cause_Category);
			sb.append(",Cause_Subcategory=" + Cause_Subcategory);
			sb.append(",Unintentional_Release__Barrels=" + String.valueOf(Unintentional_Release__Barrels));
			sb.append(",Intentional_Release__Barrels=" + String.valueOf(Intentional_Release__Barrels));
			sb.append(",Liquid_Recovery__Barrels=" + Liquid_Recovery__Barrels);
			sb.append(",Net_Loss__Barrels=" + String.valueOf(Net_Loss__Barrels));
			sb.append(",Liquid_Ignition=" + Liquid_Ignition);
			sb.append(",Liquid_Explosion=" + Liquid_Explosion);
			sb.append(",Pipeline_Shutdown=" + Pipeline_Shutdown);
			sb.append(",Shutdown_Date_Time=" + String.valueOf(Shutdown_Date_Time));
			sb.append(",Restart_Date_Time=" + String.valueOf(Restart_Date_Time));
			sb.append(",Public_Evacuations=" + Public_Evacuations);
			sb.append(",Operator_Employee_Injuries=" + Operator_Employee_Injuries);
			sb.append(",Operator_Contractor_Injuries=" + Operator_Contractor_Injuries);
			sb.append(",Emergency_Responder_Injuries=" + Emergency_Responder_Injuries);
			sb.append(",Other_Injuries=" + Other_Injuries);
			sb.append(",Public_Injuries=" + Public_Injuries);
			sb.append(",All_Injuries=" + All_Injuries);
			sb.append(",Operator_Employee_Fatalities=" + Operator_Employee_Fatalities);
			sb.append(",Operator_Contractor_Fatalities=" + Operator_Contractor_Fatalities);
			sb.append(",Emergency_Responder_Fatalities=" + Emergency_Responder_Fatalities);
			sb.append(",Other_Fatalities=" + Other_Fatalities);
			sb.append(",Public_Fatalities=" + Public_Fatalities);
			sb.append(",All_Fatalities=" + All_Fatalities);
			sb.append(",Property_Damage_Costs=" + String.valueOf(Property_Damage_Costs));
			sb.append(",Lost_Commodity_Costs=" + String.valueOf(Lost_Commodity_Costs));
			sb.append(",Public_Private_Property_Damage_Costs=" + String.valueOf(Public_Private_Property_Damage_Costs));
			sb.append(",Emergency_Response_Costs=" + String.valueOf(Emergency_Response_Costs));
			sb.append(",Environmental_Remediation_Costs=" + String.valueOf(Environmental_Remediation_Costs));
			sb.append(",Other_Costs=" + Other_Costs);
			sb.append(",All_Costs=" + String.valueOf(All_Costs));
			sb.append(",Column48=" + Column48);
			sb.append(",Column49=" + Column49);
			sb.append(",Column50=" + Column50);
			sb.append(",Column51=" + Column51);
			sb.append(",Column52=" + Column52);
			sb.append(",Column53=" + Column53);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tDBOutput_1 = 0;

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 30 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "SA";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;

				String properties_tDBOutput_1 = "serverTimezone=UTC";
				if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
					properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "oilaccident" + "?"
						+ properties_tDBOutput_1;

				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:ahhWeoki7kK+tNZ2zInvkOVILQb16oWBiO2s3ESx0PHJh6zc3KiS");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("oilaccident", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_1 = false;
				while (rsTable_tDBOutput_1.next()) {
					String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
					if (table_tDBOutput_1.equalsIgnoreCase("SA")) {
						whetherExist_tDBOutput_1 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1
								+ "`(`Report_Number` INT(8)  ,`Supplemental_Number` INT(5)  ,`Accident_Date_Time` DATETIME ,`Operator_ID` INT(5)  ,`Operator_Name` VARCHAR(100)  ,`Pipeline_Facility_Name` VARCHAR(100)  ,`Pipeline_Location` VARCHAR(60)  ,`Pipeline_Type` VARCHAR(60)  ,`Liquid_Type` VARCHAR(100)  ,`Liquid_Subtype` VARCHAR(100)  ,`Liquid_Name` VARCHAR(56)  ,`Accident_City` VARCHAR(56)  ,`Accident_County` VARCHAR(17)  ,`Accident_State` VARCHAR(16)  ,`Accident_Latitude` FLOAT(12,6)  ,`Accident_Longitude` FLOAT(11,6)  ,`Cause_Category` VARCHAR(61)  ,`Cause_Subcategory` VARCHAR(100)  ,`Unintentional_Release__Barrels` DOUBLE(60,0)  ,`Intentional_Release__Barrels` DOUBLE(60,0)  ,`Net_Loss__Barrels` DOUBLE(60,0)  ,`Pipeline_Shutdown` VARCHAR(4)  ,`Shutdown_Date_Time` DATETIME ,`Restart_Date_Time` DATETIME ,`Property_Damage_Costs` INT(5)  ,`Lost_Commodity_Costs` INT(6)  ,`Public_Private_Property_Damage_Costs` INT(6)  ,`Emergency_Response_Costs` INT(7)  ,`Environmental_Remediation_Costs` INT(7)  ,`All_Costs` INT(7)  ,primary key(`Report_Number`))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM `" + "SA" + "` WHERE `Report_Number` = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO `" + "SA"
						+ "` (`Report_Number`,`Supplemental_Number`,`Accident_Date_Time`,`Operator_ID`,`Operator_Name`,`Pipeline_Facility_Name`,`Pipeline_Location`,`Pipeline_Type`,`Liquid_Type`,`Liquid_Subtype`,`Liquid_Name`,`Accident_City`,`Accident_County`,`Accident_State`,`Accident_Latitude`,`Accident_Longitude`,`Cause_Category`,`Cause_Subcategory`,`Unintentional_Release__Barrels`,`Intentional_Release__Barrels`,`Net_Loss__Barrels`,`Pipeline_Shutdown`,`Shutdown_Date_Time`,`Restart_Date_Time`,`Property_Damage_Costs`,`Lost_Commodity_Costs`,`Public_Private_Property_Damage_Costs`,`Emergency_Response_Costs`,`Environmental_Remediation_Costs`,`All_Costs`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE `" + "SA"
						+ "` SET `Supplemental_Number` = ?,`Accident_Date_Time` = ?,`Operator_ID` = ?,`Operator_Name` = ?,`Pipeline_Facility_Name` = ?,`Pipeline_Location` = ?,`Pipeline_Type` = ?,`Liquid_Type` = ?,`Liquid_Subtype` = ?,`Liquid_Name` = ?,`Accident_City` = ?,`Accident_County` = ?,`Accident_State` = ?,`Accident_Latitude` = ?,`Accident_Longitude` = ?,`Cause_Category` = ?,`Cause_Subcategory` = ?,`Unintentional_Release__Barrels` = ?,`Intentional_Release__Barrels` = ?,`Net_Loss__Barrels` = ?,`Pipeline_Shutdown` = ?,`Shutdown_Date_Time` = ?,`Restart_Date_Time` = ?,`Property_Damage_Costs` = ?,`Lost_Commodity_Costs` = ?,`Public_Private_Property_Damage_Costs` = ?,`Emergency_Response_Costs` = ?,`Environmental_Remediation_Costs` = ?,`All_Costs` = ? WHERE `Report_Number` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/akila/Internship/archive/database.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/akila/Internship/archive/database.csv", "US-ASCII", ",", "\n", false, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Report_Number = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Report_Number", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Report_Number = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Supplemental_Number = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Supplemental_Number", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Supplemental_Number = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Accident_Year = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Accident_Year", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Accident_Year = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Accident_Date_Time = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Accident_Date_Time", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Accident_Date_Time = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Operator_ID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Operator_ID", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Operator_ID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.Operator_Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.Pipeline_Facility_Name = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.Pipeline_Location = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.Pipeline_Type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.Liquid_Type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.Liquid_Subtype = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.Liquid_Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row1.Accident_City = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row1.Accident_County = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row1.Accident_State = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Accident_Latitude = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Accident_Latitude", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Accident_Latitude = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Accident_Longitude = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Accident_Longitude", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Accident_Longitude = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row1.Cause_Category = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row1.Cause_Subcategory = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Unintentional_Release__Barrels = ParserUtils.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Unintentional_Release__Barrels", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Unintentional_Release__Barrels = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 20;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Intentional_Release__Barrels = ParserUtils.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Intentional_Release__Barrels", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Intentional_Release__Barrels = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row1.Liquid_Recovery__Barrels = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Net_Loss__Barrels = ParserUtils.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Net_Loss__Barrels", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Net_Loss__Barrels = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row1.Liquid_Ignition = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row1.Liquid_Explosion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							row1.Pipeline_Shutdown = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 26;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Shutdown_Date_Time = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Shutdown_Date_Time", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Shutdown_Date_Time = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 27;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Restart_Date_Time = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Restart_Date_Time", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Restart_Date_Time = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row1.Public_Evacuations = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row1.Operator_Employee_Injuries = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row1.Operator_Contractor_Injuries = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row1.Emergency_Responder_Injuries = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row1.Other_Injuries = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 33;

							row1.Public_Injuries = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 34;

							row1.All_Injuries = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 35;

							row1.Operator_Employee_Fatalities = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 36;

							row1.Operator_Contractor_Fatalities = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 37;

							row1.Emergency_Responder_Fatalities = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 38;

							row1.Other_Fatalities = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 39;

							row1.Public_Fatalities = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 40;

							row1.All_Fatalities = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 41;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Property_Damage_Costs = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Property_Damage_Costs", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Property_Damage_Costs = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 42;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Lost_Commodity_Costs = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Lost_Commodity_Costs", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Lost_Commodity_Costs = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 43;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Public_Private_Property_Damage_Costs = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Public_Private_Property_Damage_Costs", "row1", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.Public_Private_Property_Damage_Costs = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 44;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Emergency_Response_Costs = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Emergency_Response_Costs", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Emergency_Response_Costs = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 45;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Environmental_Remediation_Costs = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Environmental_Remediation_Costs", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Environmental_Remediation_Costs = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 46;

							row1.Other_Costs = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 47;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.All_Costs = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"All_Costs", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.All_Costs = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 48;

							row1.Column48 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 49;

							row1.Column49 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 50;

							row1.Column50 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 51;

							row1.Column51 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 52;

							row1.Column52 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 53;

							row1.Column53 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

// # Output table : 'out1'
								out1_tmp.Report_Number = row1.Report_Number;
								out1_tmp.Supplemental_Number = row1.Supplemental_Number;
								out1_tmp.Accident_Date_Time = row1.Accident_Date_Time;
								out1_tmp.Operator_ID = row1.Operator_ID;
								out1_tmp.Operator_Name = row1.Operator_Name;
								out1_tmp.Pipeline_Facility_Name = row1.Pipeline_Facility_Name.isEmpty() ? "Unknown"
										: row1.Pipeline_Facility_Name;
								out1_tmp.Pipeline_Location = row1.Pipeline_Location.isEmpty() ? "Unknown"
										: row1.Pipeline_Location;
								out1_tmp.Pipeline_Type = row1.Pipeline_Type.isEmpty() ? "Unknown" : row1.Pipeline_Type;
								out1_tmp.Liquid_Type = row1.Liquid_Type;
								out1_tmp.Liquid_Subtype = row1.Liquid_Subtype;
								out1_tmp.Liquid_Name = row1.Liquid_Name;
								out1_tmp.Accident_City = row1.Accident_City.isEmpty() ? "OTHER" : row1.Accident_City;
								out1_tmp.Accident_County = row1.Accident_County.isEmpty() ? "OTHER"
										: row1.Accident_County;
								out1_tmp.Accident_State = row1.Accident_State.isEmpty() ? "OTHER" : row1.Accident_State;
								out1_tmp.Accident_Latitude = row1.Accident_Latitude;
								out1_tmp.Accident_Longitude = row1.Accident_Longitude;
								out1_tmp.Cause_Category = row1.Cause_Category;
								out1_tmp.Cause_Subcategory = row1.Cause_Subcategory;
								out1_tmp.Unintentional_Release__Barrels = row1.Unintentional_Release__Barrels;
								out1_tmp.Intentional_Release__Barrels = row1.Intentional_Release__Barrels;
								out1_tmp.Net_Loss__Barrels = row1.Net_Loss__Barrels;
								out1_tmp.Pipeline_Shutdown = row1.Pipeline_Shutdown;
								out1_tmp.Shutdown_Date_Time = row1.Shutdown_Date_Time;
								out1_tmp.Restart_Date_Time = row1.Restart_Date_Time;
								out1_tmp.Property_Damage_Costs = row1.Property_Damage_Costs;
								out1_tmp.Lost_Commodity_Costs = row1.Lost_Commodity_Costs;
								out1_tmp.Public_Private_Property_Damage_Costs = row1.Public_Private_Property_Damage_Costs;
								out1_tmp.Emergency_Response_Costs = row1.Emergency_Response_Costs;
								out1_tmp.Environmental_Remediation_Costs = row1.Environmental_Remediation_Costs;
								out1_tmp.All_Costs = row1.All_Costs;
								out1 = out1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "out1"

									);
								}

								whetherReject_tDBOutput_1 = false;
								if (out1.Report_Number == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(1, out1.Report_Number);
								}

								int checkCount_tDBOutput_1 = -1;
								try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
									while (rs_tDBOutput_1.next()) {
										checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
									}
								}
								if (checkCount_tDBOutput_1 > 0) {
									if (out1.Supplemental_Number == null) {
										pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(1, out1.Supplemental_Number);
									}

									if (out1.Accident_Date_Time != null) {
										date_tDBOutput_1 = out1.Accident_Date_Time.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtUpdate_tDBOutput_1.setString(2, "0000-00-00 00:00:00");
										} else {
											pstmtUpdate_tDBOutput_1.setTimestamp(2,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.DATE);
									}

									if (out1.Operator_ID == null) {
										pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(3, out1.Operator_ID);
									}

									if (out1.Operator_Name == null) {
										pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(4, out1.Operator_Name);
									}

									if (out1.Pipeline_Facility_Name == null) {
										pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(5, out1.Pipeline_Facility_Name);
									}

									if (out1.Pipeline_Location == null) {
										pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(6, out1.Pipeline_Location);
									}

									if (out1.Pipeline_Type == null) {
										pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(7, out1.Pipeline_Type);
									}

									if (out1.Liquid_Type == null) {
										pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(8, out1.Liquid_Type);
									}

									if (out1.Liquid_Subtype == null) {
										pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(9, out1.Liquid_Subtype);
									}

									if (out1.Liquid_Name == null) {
										pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(10, out1.Liquid_Name);
									}

									if (out1.Accident_City == null) {
										pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(11, out1.Accident_City);
									}

									if (out1.Accident_County == null) {
										pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(12, out1.Accident_County);
									}

									if (out1.Accident_State == null) {
										pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(13, out1.Accident_State);
									}

									if (out1.Accident_Latitude == null) {
										pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.FLOAT);
									} else {
										pstmtUpdate_tDBOutput_1.setFloat(14, out1.Accident_Latitude);
									}

									if (out1.Accident_Longitude == null) {
										pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.FLOAT);
									} else {
										pstmtUpdate_tDBOutput_1.setFloat(15, out1.Accident_Longitude);
									}

									if (out1.Cause_Category == null) {
										pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(16, out1.Cause_Category);
									}

									if (out1.Cause_Subcategory == null) {
										pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(17, out1.Cause_Subcategory);
									}

									if (out1.Unintentional_Release__Barrels == null) {
										pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tDBOutput_1.setDouble(18, out1.Unintentional_Release__Barrels);
									}

									if (out1.Intentional_Release__Barrels == null) {
										pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tDBOutput_1.setDouble(19, out1.Intentional_Release__Barrels);
									}

									if (out1.Net_Loss__Barrels == null) {
										pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tDBOutput_1.setDouble(20, out1.Net_Loss__Barrels);
									}

									if (out1.Pipeline_Shutdown == null) {
										pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(21, out1.Pipeline_Shutdown);
									}

									if (out1.Shutdown_Date_Time != null) {
										date_tDBOutput_1 = out1.Shutdown_Date_Time.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtUpdate_tDBOutput_1.setString(22, "0000-00-00 00:00:00");
										} else {
											pstmtUpdate_tDBOutput_1.setTimestamp(22,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.DATE);
									}

									if (out1.Restart_Date_Time != null) {
										date_tDBOutput_1 = out1.Restart_Date_Time.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtUpdate_tDBOutput_1.setString(23, "0000-00-00 00:00:00");
										} else {
											pstmtUpdate_tDBOutput_1.setTimestamp(23,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.DATE);
									}

									if (out1.Property_Damage_Costs == null) {
										pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(24, out1.Property_Damage_Costs);
									}

									if (out1.Lost_Commodity_Costs == null) {
										pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(25, out1.Lost_Commodity_Costs);
									}

									if (out1.Public_Private_Property_Damage_Costs == null) {
										pstmtUpdate_tDBOutput_1.setNull(26, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(26, out1.Public_Private_Property_Damage_Costs);
									}

									if (out1.Emergency_Response_Costs == null) {
										pstmtUpdate_tDBOutput_1.setNull(27, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(27, out1.Emergency_Response_Costs);
									}

									if (out1.Environmental_Remediation_Costs == null) {
										pstmtUpdate_tDBOutput_1.setNull(28, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(28, out1.Environmental_Remediation_Costs);
									}

									if (out1.All_Costs == null) {
										pstmtUpdate_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(29, out1.All_Costs);
									}

									if (out1.Report_Number == null) {
										pstmtUpdate_tDBOutput_1.setNull(30 + count_tDBOutput_1, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(30 + count_tDBOutput_1, out1.Report_Number);
									}

									try {
										int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
										updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
										rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
										nb_line_tDBOutput_1++;
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_1 = true;
										nb_line_tDBOutput_1++;
										System.err.print(e.getMessage());
									}
								} else {
									if (out1.Report_Number == null) {
										pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(1, out1.Report_Number);
									}

									if (out1.Supplemental_Number == null) {
										pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(2, out1.Supplemental_Number);
									}

									if (out1.Accident_Date_Time != null) {
										date_tDBOutput_1 = out1.Accident_Date_Time.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtInsert_tDBOutput_1.setString(3, "0000-00-00 00:00:00");
										} else {
											pstmtInsert_tDBOutput_1.setTimestamp(3,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.DATE);
									}

									if (out1.Operator_ID == null) {
										pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(4, out1.Operator_ID);
									}

									if (out1.Operator_Name == null) {
										pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(5, out1.Operator_Name);
									}

									if (out1.Pipeline_Facility_Name == null) {
										pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(6, out1.Pipeline_Facility_Name);
									}

									if (out1.Pipeline_Location == null) {
										pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(7, out1.Pipeline_Location);
									}

									if (out1.Pipeline_Type == null) {
										pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(8, out1.Pipeline_Type);
									}

									if (out1.Liquid_Type == null) {
										pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(9, out1.Liquid_Type);
									}

									if (out1.Liquid_Subtype == null) {
										pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(10, out1.Liquid_Subtype);
									}

									if (out1.Liquid_Name == null) {
										pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(11, out1.Liquid_Name);
									}

									if (out1.Accident_City == null) {
										pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(12, out1.Accident_City);
									}

									if (out1.Accident_County == null) {
										pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(13, out1.Accident_County);
									}

									if (out1.Accident_State == null) {
										pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(14, out1.Accident_State);
									}

									if (out1.Accident_Latitude == null) {
										pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.FLOAT);
									} else {
										pstmtInsert_tDBOutput_1.setFloat(15, out1.Accident_Latitude);
									}

									if (out1.Accident_Longitude == null) {
										pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.FLOAT);
									} else {
										pstmtInsert_tDBOutput_1.setFloat(16, out1.Accident_Longitude);
									}

									if (out1.Cause_Category == null) {
										pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(17, out1.Cause_Category);
									}

									if (out1.Cause_Subcategory == null) {
										pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(18, out1.Cause_Subcategory);
									}

									if (out1.Unintentional_Release__Barrels == null) {
										pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(19, out1.Unintentional_Release__Barrels);
									}

									if (out1.Intentional_Release__Barrels == null) {
										pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(20, out1.Intentional_Release__Barrels);
									}

									if (out1.Net_Loss__Barrels == null) {
										pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(21, out1.Net_Loss__Barrels);
									}

									if (out1.Pipeline_Shutdown == null) {
										pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(22, out1.Pipeline_Shutdown);
									}

									if (out1.Shutdown_Date_Time != null) {
										date_tDBOutput_1 = out1.Shutdown_Date_Time.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtInsert_tDBOutput_1.setString(23, "0000-00-00 00:00:00");
										} else {
											pstmtInsert_tDBOutput_1.setTimestamp(23,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.DATE);
									}

									if (out1.Restart_Date_Time != null) {
										date_tDBOutput_1 = out1.Restart_Date_Time.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtInsert_tDBOutput_1.setString(24, "0000-00-00 00:00:00");
										} else {
											pstmtInsert_tDBOutput_1.setTimestamp(24,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.DATE);
									}

									if (out1.Property_Damage_Costs == null) {
										pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(25, out1.Property_Damage_Costs);
									}

									if (out1.Lost_Commodity_Costs == null) {
										pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(26, out1.Lost_Commodity_Costs);
									}

									if (out1.Public_Private_Property_Damage_Costs == null) {
										pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(27, out1.Public_Private_Property_Damage_Costs);
									}

									if (out1.Emergency_Response_Costs == null) {
										pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(28, out1.Emergency_Response_Costs);
									}

									if (out1.Environmental_Remediation_Costs == null) {
										pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(29, out1.Environmental_Remediation_Costs);
									}

									if (out1.All_Costs == null) {
										pstmtInsert_tDBOutput_1.setNull(30, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(30, out1.All_Costs);
									}

									try {
										int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
										insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
										rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
										nb_line_tDBOutput_1++;
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_1 = true;
										nb_line_tDBOutput_1++;
										System.err.print(e.getMessage());
									}
								}
								commitCounter_tDBOutput_1++;

								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

									if (rowsToCommitCount_tDBOutput_1 != 0) {
									}
									conn_tDBOutput_1.commit();
									if (rowsToCommitCount_tDBOutput_1 != 0) {
										rowsToCommitCount_tDBOutput_1 = 0;
									}
									commitCounter_tDBOutput_1 = 0;

								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "out1"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/akila/Internship/archive/database.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final StagingArea StagingAreaClass = new StagingArea();

		int exitCode = StagingAreaClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = StagingArea.class.getClassLoader()
					.getResourceAsStream("oilaccidents/stagingarea_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = StagingArea.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : StagingArea");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 152131 characters generated by Talend Open Studio for Big Data on the August
 * 22, 2023 at 2:18:56 PM WAT
 ************************************************************************************************/